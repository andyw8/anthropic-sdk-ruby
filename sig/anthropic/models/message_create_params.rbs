module Anthropic
  module Models
    type message_create_params =
      {
        max_tokens: Integer,
        messages: Array[Anthropic::Models::MessageParam],
        model: Anthropic::Models::model,
        metadata: Anthropic::Models::Metadata,
        stop_sequences: Array[String],
        stream: Anthropic::Models::MessageCreateParams::stream,
        system_: Anthropic::Models::MessageCreateParams::system_,
        temperature: Float,
        tool_choice: Anthropic::Models::tool_choice,
        tools: Array[Anthropic::Models::Tool],
        top_k: Integer,
        top_p: Float
      }
      & Anthropic::request_parameters

    class MessageCreateParams < Anthropic::BaseModel
      extend Anthropic::RequestParameters::Converter
      include Anthropic::RequestParameters

      attr_accessor max_tokens: Integer

      attr_accessor messages: Array[Anthropic::Models::MessageParam]

      attr_accessor model: Anthropic::Models::model

      attr_reader metadata: Anthropic::Models::Metadata?

      def metadata=: (Anthropic::Models::Metadata) -> void

      attr_reader stop_sequences: Array[String]?

      def stop_sequences=: (Array[String]) -> void

      attr_accessor stream: Anthropic::Models::MessageCreateParams::stream

      attr_reader system_: Anthropic::Models::MessageCreateParams::system_?

      def system_=: (Anthropic::Models::MessageCreateParams::system_) -> void

      attr_reader temperature: Float?

      def temperature=: (Float) -> void

      attr_reader tool_choice: Anthropic::Models::tool_choice?

      def tool_choice=: (Anthropic::Models::tool_choice) -> void

      attr_reader tools: Array[Anthropic::Models::Tool]?

      def tools=: (Array[Anthropic::Models::Tool]) -> void

      attr_reader top_k: Integer?

      def top_k=: (Integer) -> void

      attr_reader top_p: Float?

      def top_p=: (Float) -> void

      def initialize:
        (
          max_tokens: Integer,
          messages: Array[Anthropic::Models::MessageParam],
          model: Anthropic::Models::model,
          stream: Anthropic::Models::MessageCreateParams::stream,
          metadata: Anthropic::Models::Metadata,
          stop_sequences: Array[String],
          system_: Anthropic::Models::MessageCreateParams::system_,
          temperature: Float,
          tool_choice: Anthropic::Models::tool_choice,
          tools: Array[Anthropic::Models::Tool],
          top_k: Integer,
          top_p: Float,
          request_options: Anthropic::request_opts
        ) -> void
        | (
          ?Anthropic::Models::message_create_params | Anthropic::BaseModel data
        ) -> void

      def to_hash: -> Anthropic::Models::message_create_params

      type stream = true

      class Stream < Anthropic::Enum
        TRUE: true

        def self.values: -> Array[Anthropic::Models::MessageCreateParams::stream]
      end

      type system_ = String | Array[Anthropic::Models::TextBlockParam]

      class System < Anthropic::Union
        type text_block_param_array = Array[Anthropic::Models::TextBlockParam]

        TextBlockParamArray: text_block_param_array

        private def self.variants: -> [[nil, String], [nil, Array[Anthropic::Models::TextBlockParam]]]
      end
    end
  end
end
