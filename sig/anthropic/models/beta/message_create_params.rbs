module Anthropic
  module Models
    module Beta
      type message_create_params =
        {
          max_tokens: Integer,
          messages: ::Array[Anthropic::Models::Beta::BetaMessageParam],
          model: Anthropic::Models::model,
          metadata: Anthropic::Models::Beta::BetaMetadata,
          stop_sequences: ::Array[String],
          stream: Anthropic::Models::Beta::MessageCreateParams::stream,
          system_: Anthropic::Models::Beta::MessageCreateParams::system_,
          temperature: Float,
          tool_choice: Anthropic::Models::Beta::beta_tool_choice,
          tools: ::Array[Anthropic::Models::Beta::beta_tool_union],
          top_k: Integer,
          top_p: Float,
          betas: ::Array[Anthropic::Models::anthropic_beta]
        }
        & Anthropic::request_parameters

      class MessageCreateParams < Anthropic::BaseModel
        extend Anthropic::RequestParameters::Converter
        include Anthropic::RequestParameters

        attr_accessor max_tokens: Integer

        attr_accessor messages: ::Array[Anthropic::Models::Beta::BetaMessageParam]

        attr_accessor model: Anthropic::Models::model

        attr_reader metadata: Anthropic::Models::Beta::BetaMetadata?

        def metadata=: (Anthropic::Models::Beta::BetaMetadata) -> void

        attr_reader stop_sequences: ::Array[String]?

        def stop_sequences=: (::Array[String]) -> void

        attr_accessor stream: Anthropic::Models::Beta::MessageCreateParams::stream

        attr_reader system_: Anthropic::Models::Beta::MessageCreateParams::system_?

        def system_=: (
          Anthropic::Models::Beta::MessageCreateParams::system_
        ) -> void

        attr_reader temperature: Float?

        def temperature=: (Float) -> void

        attr_reader tool_choice: Anthropic::Models::Beta::beta_tool_choice?

        def tool_choice=: (Anthropic::Models::Beta::beta_tool_choice) -> void

        attr_reader tools: ::Array[Anthropic::Models::Beta::beta_tool_union]?

        def tools=: (::Array[Anthropic::Models::Beta::beta_tool_union]) -> void

        attr_reader top_k: Integer?

        def top_k=: (Integer) -> void

        attr_reader top_p: Float?

        def top_p=: (Float) -> void

        attr_reader betas: ::Array[Anthropic::Models::anthropic_beta]?

        def betas=: (::Array[Anthropic::Models::anthropic_beta]) -> void

        def initialize:
          (
            max_tokens: Integer,
            messages: ::Array[Anthropic::Models::Beta::BetaMessageParam],
            model: Anthropic::Models::model,
            stream: Anthropic::Models::Beta::MessageCreateParams::stream,
            metadata: Anthropic::Models::Beta::BetaMetadata,
            stop_sequences: ::Array[String],
            system_: Anthropic::Models::Beta::MessageCreateParams::system_,
            temperature: Float,
            tool_choice: Anthropic::Models::Beta::beta_tool_choice,
            tools: ::Array[Anthropic::Models::Beta::beta_tool_union],
            top_k: Integer,
            top_p: Float,
            betas: ::Array[Anthropic::Models::anthropic_beta],
            request_options: Anthropic::request_opts
          ) -> void
          | (
            ?Anthropic::Models::Beta::message_create_params
            | Anthropic::BaseModel data
          ) -> void

        def to_hash: -> Anthropic::Models::Beta::message_create_params

        type stream = true

        class Stream < Anthropic::Enum
          TRUE: true

          def self.values: -> ::Array[Anthropic::Models::Beta::MessageCreateParams::stream]
        end

        type system_ =
          String | ::Array[Anthropic::Models::Beta::BetaTextBlockParam]

        class System < Anthropic::Union
          type beta_text_block_param_array =
            ::Array[Anthropic::Models::Beta::BetaTextBlockParam]

          BetaTextBlockParamArray: beta_text_block_param_array

          private def self.variants: -> [[nil, String], [nil, ::Array[Anthropic::Models::Beta::BetaTextBlockParam]]]
        end
      end
    end
  end
end
